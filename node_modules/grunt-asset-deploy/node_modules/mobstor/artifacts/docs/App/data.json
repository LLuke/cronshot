{
    "project": {},
    "files": {
        "lib/index.js": {
            "name": "lib/index.js",
            "modules": {
                "mobstor": 1
            },
            "classes": {
                "Client": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "test/httpmock.js": {
            "name": "test/httpmock.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "mobstor": {
            "name": "mobstor",
            "submodules": {},
            "classes": {
                "Client": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "lib/index.js",
            "line": 223
        }
    },
    "classes": {
        "Client": {
            "name": "Client",
            "shortname": "Client",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "mobstor",
            "namespace": "",
            "file": "lib/index.js",
            "line": 223,
            "description": "JavaScript wrapper of MObStor client.\n\n<pre>\nConfigure connection information\n\nvar config = {\n    // mandatory\n    host : &quot;your.mobstordomain.name&quot;,\n    // optional, defult 80\n    port : 80,\n    certificate : (new yca.YCA()).get_cert(&quot;your.application.id&quot;),\n    // proxy information is optional for access from corp network to product network\n    proxy : {                            \n        host : &quot;yca-proxy.corp.yahoo.com&quot;,\n        port : 3128\n    }\n};\n\n//Create a client instance\nvar client = mobstor.createClient(config);\n\n// Call API\ntry {\n     client.storeFile(&quot;/test.txt&quot;, content1, function(error, data) {\n         if(error!=null) {\n             // handle error object\n             // error.code: http status code (can be undefined if the error is not caused by HTTP error)\n             // error.message: error message\n         }\n         else {\n             // data is JavaScript Stream object\n         }\n     });\n}\ncatch(error) {\n     // error handling..\n}\n</pre>",
            "params": [
                {
                    "name": "option",
                    "description": "Configuration",
                    "type": "Object"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib/index.js",
            "line": 11,
            "package": "ynodejs_mobstor",
            "class": "Client"
        },
        {
            "file": "lib/index.js",
            "line": 306,
            "description": "Creates a new resource or updates the value of an existing resource. If the\nresource does not already exist, then MObStor creates the resource and\nreturns a 201 Created response. If the resource already exists, then MObStor\noverwrites the object's current contents and header values.\n\nThe maximum URL length for PUT requests is 1024 bytes.\n\nPlease read http://devel.yahoo.com/mobstor/guide/put.html for more\ninformation.",
            "itemtype": "method",
            "name": "storeFile",
            "params": [
                {
                    "name": "path",
                    "description": "absolute path of full uri of the destination",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "String or readable stream to be stored. If data\n           type of this parameter is object, then JSON.stringify string will\n           be stored.",
                    "type": "String/Object"
                },
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function(error, data)"
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 355,
            "description": "Retrieves the contents of an object. Retrieving on a folder is allowed, but\nreturns an unspecified response body.\n\nYou can also use checkFile to retrieve information about a folder.\n\nPlease read http://devel.yahoo.com/mobstor/guide/get.html for more\ninformation.",
            "itemtype": "method",
            "name": "retrieveFile",
            "params": [
                {
                    "name": "path",
                    "description": "Resource to be read. Data read from MObStor will be store\n           in the body parameter",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, data)"
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 398,
            "description": "checkFile method returns only the HTTP headers for a object or folder. This\nmethod provides a quick way to check whether an object has changed since it\nwas last fetched, or to simply verify that a particular folder exists.\n\ncheckFile uses HTTP HEAD method internally. The HEAD method is preferred over\nthe retrieveFile method for checking a resource's existence or fetching its\nmetadata, since it does not download the object's contents.\n\nPlease read http://devel.yahoo.com/mobstor/guide/head.html for more\ninformation.",
            "itemtype": "method",
            "name": "checkFile",
            "params": [
                {
                    "name": "path",
                    "description": "Object path",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, data)"
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 443,
            "description": "Deletes the objects.\n\nImplementation of DELETE API\n(http://devel.yahoo.com/mobstor/guide/methods.html#delete)",
            "itemtype": "method",
            "name": "deleteFile",
            "params": [
                {
                    "name": "path",
                    "description": "Resource to be removed",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, data)"
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 485,
            "description": "Create a new folder. Folder names must end in a forward slash. If the slash\nis missing, the method throws Error\n\nRemember: you can only create a new resource if the resource's parent folder\nalready exists.",
            "params": [
                {
                    "name": "path",
                    "description": "Resource to be removed",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, data)"
                }
            ],
            "throws": {
                "description": "",
                "type": "Error"
            },
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 531,
            "description": "Check availability of folder body of the resource.\n\nImplementation of HEAD API [http://devel.yahoo.com/mobstor/guide/head.html]",
            "itemtype": "method",
            "name": "checkFolder",
            "params": [
                {
                    "name": "path",
                    "description": "Directory to be created",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function"
                }
            ],
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 566,
            "description": "Get signed/tokenized url\n\nA signed URL is a read-only URL that is valid for only a short period of time -\ni.e., a URL with an expiration date. It provides time-limited access to an\notherwise private MObStor object.\n\nIn contrast to the auto-expires feature, a signed URL does not affect the\nlifetime of the actual stored object. Signed URLs can be created for expiring\nas well as auto-expiring content.\n\nPlease read http://devel.yahoo.com/mobstor/guide/ch03s05.html#SignedURLs for\nmore information.",
            "itemtype": "method",
            "name": "getSignedUrl",
            "params": [
                {
                    "name": "url",
                    "description": "URL to be signed/tokenized.",
                    "type": "String"
                },
                {
                    "name": "expiry",
                    "description": "Expiration time in seconds from request time",
                    "type": "Number"
                },
                {
                    "name": "callback",
                    "description": "Callback function",
                    "type": "Function(error, data)"
                }
            ],
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "lib/index.js",
            "line": 630,
            "description": "Export factory method",
            "params": [
                {
                    "name": "config",
                    "description": "Configuration object",
                    "type": "Object"
                }
            ],
            "class": "Client",
            "module": "mobstor"
        },
        {
            "file": "test/httpmock.js",
            "line": 15,
            "description": "MObStor mock object response class",
            "access": "private",
            "tagname": "",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Mock object option",
                    "type": "Object"
                },
                {
                    "name": "request",
                    "description": "HTTP/HTTPS request option",
                    "type": "MObStorMockRequest"
                }
            ],
            "return": {
                "description": "",
                "type": "MObStorMockResponse"
            },
            "class": "",
            "module": "mobstor"
        },
        {
            "file": "test/httpmock.js",
            "line": 210,
            "description": "MObStor mock request class",
            "access": "private",
            "tagname": "",
            "author": "pitecus",
            "is_constructor": 1,
            "params": [
                {
                    "name": "optionss",
                    "description": "Same object as HTTP, HTTPS class",
                    "type": "Object"
                }
            ],
            "class": "",
            "module": "mobstor"
        },
        {
            "file": "test/httpmock.js",
            "line": 241,
            "description": "mock HTTP/HTTPS.reqeust(option) method",
            "params": [
                {
                    "name": "options",
                    "description": ""
                }
            ],
            "class": "",
            "module": "mobstor"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: package",
            "line": " lib/index.js:11"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " test/httpmock.js:15"
        },
        {
            "message": "Missing item type",
            "line": " lib/index.js:11"
        },
        {
            "message": "Missing item type\nCreate a new folder. Folder names must end in a forward slash. If the slash\nis missing, the method throws Error\n\nRemember: you can only create a new resource if the resource's parent folder\nalready exists.",
            "line": " lib/index.js:485"
        },
        {
            "message": "Missing item type\nExport factory method",
            "line": " lib/index.js:630"
        },
        {
            "message": "Missing item type\nMObStor mock object response class",
            "line": " test/httpmock.js:15"
        },
        {
            "message": "Missing item type\nMObStor mock request class",
            "line": " test/httpmock.js:210"
        },
        {
            "message": "Missing item type\nmock HTTP/HTTPS.reqeust(option) method",
            "line": " test/httpmock.js:241"
        }
    ]
}