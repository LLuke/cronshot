/*
 * Copyright (c) 2011 Yahoo! Inc. All rights reserved.
 */
var yca = require('yca'), 
    path = require('path'),
    fs = require('fs'),
    crypto = require('crypto'),
    exec = require('child_process').exec, 
    YUITest = require('yuitest').YUITest, 
    suite = new YUITest.TestSuite("MObStor"), 
    Assert = YUITest.Assert;

//build MObStor mock object
var httpMock = require('./httpmock.js').init(require('./senarios.js').senario);

// replace http and https object in cache
require.cache.http = {
    exports : httpMock
};

require.cache.https = {
    exports : httpMock
};

// now mobstor client use mock object instead of HTTP or HTTPS
var mobstor = require('../lib/index.js');
//var mobstor = require('../lib/index.js');

var config = {
//    host : "playground.yahoofs.com",    
    host : "safeplay.yahoofs.com",
    certificate : (new yca.YCA()).get_cert("yahoo.mobstor.safeplay"),
    proxy : {
        host : "yca-proxy.corp.yahoo.com",
        port : 3128
    }
};
/*
var config = {
    host : "safeplay.yahoofs.com",
    port : 80,
    certificate : (new yca.YCA()).get_cert("yahoo.mobstor.safeplay"),
};
*/
// create a client instance
var client = mobstor.createClient(config);

// temporary data to check downloaded content
var content1 = JSON.stringify(new Date()); // to check new file updated always
var content2 = JSON.stringify(new Date());
var content3 = new Date().getTime(); // temporary file name

var md5checksum = ''; // temporary file name
var md5checksum_filename = '/home/y/bin/svn';

function get_md5sum(path)
{
    var value='';
    
    var filename = process.argv[2];

    var md5sum = crypto.createHash('md5');
    
    var data=fs.readFileSync(path);
    md5sum.update(data);

    return md5sum.digest('hex');
}


var fetchHeaderTestCase = new YUITest.TestCase({
    name : "mobostor client for ynodejs",

    // Store text content test
    test_storeResource : function() {
        var that = this;
        var body = '';
        
        client.storeFile("/test.txt", content1, function(error, data) {
            if (error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(5 * 1000);
    },

    // Store text content test
    test_storeResourceObject : function() {
        var that = this;
        var body = '';
        
        client.storeFile("/test_object.txt", {}, function(error, data) {
            if (error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(5 * 1000);
    },

    // Check object
    test_checkFile : function() {
        var that = this;
        var body = '';
        
        client.checkFile("/test.txt", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {                
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    // retrieve text 
    test_retrieveResource : function() {
        var body = '';
        var that = this;

        client.retrieveFile("/test.txt", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                data.on('data', function(chunk) {
                    body += chunk;
                });

                data.on('end', function() {
                    that.resume(function() {
                        Assert.isTrue(body===content1);
                    });
                });
            }
        });
        
        this.wait(20 * 1000);
    },
    
    // full path retrieve
    test_retrieveResourceWithFullPath : function() {
        var body = '';
        var that = this;

        client.retrieveFile("http://"+config.host+"/test.txt", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                data.on('data', function(chunk) {
                    body += chunk;
                });
                
                data.on('end', function() {
                    that.resume(function() {
                        Assert.isTrue(true);
                    });
                });
            }

        });
        
        this.wait(20 * 1000);
    },

    // retrieve text 
    test_retrieveResourceRedirection : function() {
        var body = '';
        var that = this;

        client.retrieveFile("/source.txt", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    test_retrieveResourceRedirectionWithQueryString : function() {
        var body = '';
        var that = this;

        client.retrieveFile("/builds/build-3.1.0/videoplayer-min.js", function(error, data) {
            that.resume(function() {
                Assert.isNotNull(error);
                Assert.isNotNull(error.code);
                Assert.areEqual(404, error.code);
            });
        });
        
        this.wait(20 * 1000);
    },

    //  
    test_retrieveResourceRedirectionWithQueryStringAndMaximumRedirectionLimit : function() {
        var body = '';
        var that = this;

        var clientNew = mobstor.createClient({
            host : "safeplay.yahoofs.com",
            maxRedirect : 0,
            timeout: 10000
        });

        clientNew.retrieveFile("/builds/build-3.1.0/videoplayer-min.js", function(error, data) {
            that.resume(function() {
                Assert.isNotNull(error);
                Assert.isNotNull(error.message);
                Assert.areEqual("Reached the Maximum Redirection Limit", error.message);
            });
        });
        
        this.wait(20 * 1000);
    },

    // retrieve text 
    test_retrieveResourceRedirectionNegative : function() {
        var body = '';
        var that = this;

        client.retrieveFile("/redirection_bad.txt", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(true, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    // Negative test case for client instance creation with no configuration
    test_createClientNoConfig : function() {
        try {
            var bad = mobstor.createClient();
            Assert.isTrue(false);
        }
        catch(error) {
            Assert.isTrue(true);
        }
    },

    // Negative test case for bad configuration
    test_createClientBadConfig : function() {
        try {
            var config = {
                certificate : 'yahoo.opsdb.site.corp-snv: v=1;a=yahoo.opsdb.site.corp-snv;h=207.126.232.237;t=1314509085;s=MEo1.gg7nIapd_oB3uT0xeTHxHw0Pj3dNk61.dC0VI_.1_sPhxezHkGXGyoRkkWsUrfp.K_Qo6_7hPUaR51bnQ--'
            };
            
            var bad = mobstor.createClient(config);
            Assert.isTrue(false);
        }
        catch(error) {
            Assert.isTrue(true);
        }
    },
    
    // Negative test cases for method calling without callback
    test_throwsExceptionOnError : function() {
        // no callback
        try {
            client.storeFile("/test.txt", content1);
            Assert.isTrue(false);
        }
        catch(error1) {
            Assert.isTrue(true);
        }
        
        // destination path is folder
        try {
            client.storeFile("/test/", content1, function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error101) {
            Assert.isTrue(true);
        }
        
        // no callback
        try {
            client.checkFile("/test.txt");
            Assert.isTrue(false);
        }
        catch(error2) {
            Assert.isTrue(true);
        }

        // destination path is folder
        try {
            client.checkFile("/test/", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error104) {
            Assert.isTrue(true);
        }
        
        // no callback
        try {
            client.retrieveFile("/test.txt");
            Assert.isTrue(false);
        }
        catch(error3) {
            Assert.isTrue(true);
        }

        // destination path is folder
        try {
            client.retrieveFile("/test/", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error103) {
            Assert.isTrue(true);
        }

        // no callback
        try {
            client.deleteFile("/test.txt");
            Assert.isTrue(false);
        }
        catch(error4) {
            Assert.isTrue(true);
        }

        // invalid url format
        try {
            client.deleteFile("http:/sdsdfsdl;vxckvjxc/http:?/////test/", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error106) {
            Assert.isTrue(true);
        }

        // destination path is folder
        try {
            client.deleteFile("/test/", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error105) {
            Assert.isTrue(true);
        }

        // no callback
        try {
            client.createFolder("/test/");
            Assert.isTrue(false);
        }
        catch(error5) {
            Assert.isTrue(true);
        }

        // no callback
        try {
            client.checkFolder("/test/");
            Assert.isTrue(false);
        }
        catch(error6) {
            Assert.isTrue(true);
        }

        // no callback
        try {
            client.getSignedUrl("/test/");
            Assert.isTrue(false);
        }
        catch(error7) {
            Assert.isTrue(true);
        }

        // destination path is undefined
        try {
            client.checkFolder(undefined, function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error8) {
            Assert.isTrue(true);
        }

        // invalid folder
        try {
            client.createFolder("htt:://test.com/test", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error9) {
            Assert.isTrue(true);
        }
        
        // destination path is null
        try {
            client.createFolder(null, function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error10) {
            Assert.isTrue(true);
        }

        // path does not ends with "/"
        try {
            client.createFolder("/test.txt", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error11) {
            Assert.isTrue(true);
        }

        // invalid url format
        try {
            client.checkFolder("htt:://test.com/test.txt", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error12) {
            Assert.isTrue(true);
        }

        // path is not folder
        try {
            client.checkFolder("/test.txt", function(error, data) {});
            Assert.isTrue(false);
        }
        catch(error13) {
            Assert.isTrue(true);
        }
    },
    
    // Test file with MaxAge configuration
    test_storeFileWithMaxAge : function() {
        
        var that = this;
        var instream = fs.createReadStream(md5checksum_filename);
        
        var config_new = config;
        config_new.maxAge = 3600;
        var client_temp = new mobstor.createClient(config_new);
        client_temp.storeFile("/maxaged.txt", instream, function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    // Read maxaged object
    test_checkMaxAgedFile : function() {
        var that = this;
        
        client.checkFile("/maxaged.txt", function(error, data) {
            that.resume(function() {
                Assert.isTrue(data.headers['cache-control']==='max-age=3600');
            });
        });
        
        this.wait(20 * 1000);
    },

    // retrieve text 
    test_retrieveResource2 : function() {
        var body = '';
        var that = this;

        client.retrieveFile("/maxaged.txt", function(error, data) {
            // data is a Stream object
            data.on('data', function(chunk) {
                body += chunk;
            });
            
            data.on('end', function() {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            });
        });
        
        this.wait(20 * 1000);
    },

    // read non-exist object
    test_retrieveResource404 : function() {
        var that = this;
        
        client.retrieveFile("/404_not_found.txt", function(error, data) {
            if (error) {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 404, 'error code: ' + data.statusCode);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode !== 404, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    // upload file size
    test_storeFileStream : function() {
        var body = '';
        var instream = fs.createReadStream(path.resolve(__dirname, 'test.dat'));
        var that = this;
                
        client.storeFile("/stream.txt", instream, function(error, data) {
            if (error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    // download updated file stream and compare downloaded file size and original file size
    test_retrieveFileStoredFromFile : function() {
        var body = '';
        var stat=fs.statSync(path.resolve(__dirname, 'test.dat'));
        var that = this;

        var downloadfile = fs.createWriteStream(path.resolve(__dirname, 'test.out.2.bin'), {'flags': 'w'});

        var client2 = mobstor.createClient(config);
        client2.retrieveFile("/stream.txt", function(error, data) {
            data.pipe(downloadfile);
            
            data.on('end', function() {
                that.resume(function() {
                    Assert.isTrue(true);
                    Assert.isTrue(get_md5sum(path.resolve(__dirname, 'test.out.2.bin')) === get_md5sum(path.resolve(__dirname, 'test.dat')));
                });
            });
        });
        
        this.wait(20 * 1000);
    },

    // create a folder
    test_createFolder : function() {
        var that = this;
        
        client.createFolder("/test/", function(error, data) {
            if(error) {
                that.resume(function() {
                    Asser.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },

    test_checkFolder : function() {
        var that = this;
        
        client.checkFolder("/test/", function(error, data) {
            if(error) {
                that.resume(function() {
                    Asser.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },
    
    
    // upload file size
    test_storeBinaryFileStream : function() {
        
        var body = '';
        var instream = fs.createReadStream(md5checksum_filename);
        var that = this;

        md5checksum=get_md5sum(md5checksum_filename);
        
        var config_new = config;
        config_new.maxAge = 3600;
        
        var client_temp = new mobstor.createClient(config_new);
                        
        client_temp.storeFile("/stream.bin", instream, function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(30 * 1000);
    },
    

    // download updated file stream and compare downloaded file size and original file size
    test_retrieveBinaryFileStoredFromFile : function() {
        var body = '';
        var that = this;
        
        var downloadfile = fs.createWriteStream(path.resolve(__dirname, 'test.out.1.bin'), {'flags': 'w'});
        var md5checksum=get_md5sum(md5checksum_filename);
        
        client.retrieveFile("/stream.bin", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                data.pipe(downloadfile);
                data.on('end', function() {
                    downloadfile.end();
                    that.resume(function() {
                        Assert.isTrue(md5checksum===get_md5sum(path.resolve(__dirname, 'test.out.1.bin')));
                    });
                });
            }
        });
        
        this.wait(20 * 1000);
    },
    
    // upload file size
    test_storeBinaryFileStream2 : function() {
        
        var body = '';
        var instream = fs.createReadStream(md5checksum_filename);
        var that = this;

        md5checksum=get_md5sum(md5checksum_filename);
        
        client.storeFile("/stream2.bin", instream, function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(20 * 1000);
    },


    // download updated file stream and compare downloaded file size and original file size
    test_retrieveBinaryFileStoredFromFileTwice : function() {
        var body = '';
        var that = this;
        
        var downloadfile = fs.createWriteStream(path.resolve(__dirname, 'test.out.2.bin'), {'flags': 'w'});
        
        client.retrieveFile("/stream.bin", function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                data.pipe(downloadfile);
                data.on('end', function() {
                    downloadfile.end();
                    that.resume(function() {
                        Assert.isTrue(md5checksum===get_md5sum(path.resolve(__dirname, 'test.out.2.bin')));
                    });
                });
            }
        });
        
        this.wait(20 * 1000);
    },    

    // remove object
    test_deleteResource : function() {
        var that = this;
        
        client.deleteFile("/test.txt", function(error, data) {
            if(error) {
                Assert.isTrue(false, error.message);
            }
            else {
                that.resume(function() {
                    Assert.isTrue(data.statusCode === 200, 'error code: ' + data.statusCode);
                });
            }
        });
        
        this.wait(5 * 1000);
    },    
    
    
    // negative test cases
    test_getSignedUrlNegativeUrl : function() {
        var that = this;
        var signedUrl='';

        client.getSignedUrl("/test.txt", 10000, function(error, data) {
            if(error) {
                that.resume(function() {
                    Assert.isTrue(false, error.message);
                });
            }
            else {
                // data is a Stream object
                data.on('data', function(chunk) {
                    signedUrl += chunk;
                });
                
                data.on('end', function() {
                    that.resume(function() {
                        Assert.isTrue(data.statusCode === 200, signedUrl);
                    });
                });
            }
        });
        
        this.wait(5 * 1000);
    },

    test_getSignedUrlNegativeExpirey : function() {
        var that = this;
        var signedUrl='';
        try {
            client.getSignedUrl("/test.txt", 'test', function(error, data) {
                // data is a Stream object
                data.on('data', function(chunk) {
                    signedUrl += chunk;
                });
                
                data.on('end', function() {
                    that.resume(function() {
                        Assert.isTrue(false, error.message);
                    });
                });
            });
            
            this.wait(20 * 1000);
        }
        catch(error) {
            Assert.isTrue(true);
        }
    },

    setUp : function() {
    },
    
    tearDown : function() {
    }
});

YUITest.TestRunner.add(fetchHeaderTestCase);
//require("yuitest/finalresults").saveResultsTo(YUITest, "./build/coverage/unit_test.xml", "./build/coverage/coverage.json", true);

// vim:ts=4 sw=4 et
