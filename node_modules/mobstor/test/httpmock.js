/*
 * Copyright (c) 2011 Yahoo! Inc. All rights reserved.
 */

var sys = require('sys'), 
    fs = require('fs'), 
    url = require('url'), 
    path = require('path'), 
    Stream = require("stream").Stream, 
    util = require('util'), 
    qs = require('querystring'), 
    events = require("events"),
    StringDecoder = require('string_decoder').StringDecoder;

/**
 * MObStor mock object response class
 * 
 * @private
 * @constructor
 * @param options {Object} Mock object option
 * @param request {MObStorMockRequest}  HTTP/HTTPS request option
 * @returns {MObStorMockResponse}
 */
var MObStorMockResponse = function (options, request) {
    // mock object options
    this._options = options;
    // http request options
    this._request = request;
    
    this._decoder = new StringDecoder(this._options.defaultEncoding);
    
    // callback function storage
    this._callback = {};
    
    this.statusCode = 200;
    this.httpVersion = this._options.version;
    this.complete = true;

    var service="";
    if(this._request.url && this._request.url.host) {
        service=this._request.url.host;
    }
    else {
        service=this._request.host;
    }



    var temp_stream=null;
    for(i=0;i<this._options[service].senario.length;i++) {
        var senario=this._options[service].senario[i];

        if(senario.request.path===this._request.url.pathname && senario.request.method===this._request.method) {
            if(senario.request.saveBody) {
                var data=fs.readFileSync('/tmp/inbuffer','binary');
                fs.writeFileSync(senario.request.saveBody, data,'binary');
            }
            
            if(senario.response.readBody) {
                try {
                    fs.statSync(senario.response.readBody);
                    this.outstream = fs.createReadStream(senario.response.readBody, {
                        'flags' : 'r',
                        'encoding' : null,
                        'mode' : 438
                    });
                }
                catch(e) {
                    // 404????
                }
            }
            else if(senario.response.body) {
                temp_stream = fs.createWriteStream('/tmp/outbuffer', {
                    'flags' : 'w',
                    'encoding' : null,
                    'mode' : 438
                });
                temp_stream.write(senario.response.body);
                temp_stream.end();
                
                this.outstream = fs.createReadStream('/tmp/outbuffer', {
                    'flags' : 'r',
                    'encoding' : null,
                    'mode' : 438
                });
            }

            
            this.statusCode = senario.response.statusCode;
            this.headers = senario.response.headers || {};
            
            break;
        }
    }

    if(!this.outstream) {
        temp_stream = fs.createWriteStream('/tmp/outbuffer', {
            'flags' : 'w',
            'encoding' : null,
            'mode' : 438
        });
        temp_stream.write("NOT HANDLED");
        temp_stream.end();
        
        this.outstream = fs.createReadStream(this._options[service].storage+'/outbuffer', {
            'flags' : 'r',
            'encoding' : null,
            'mode' : 438
        });
    }    

    if(this.outstream!==null) {
        var self = this;

        // compose Content-Length header
        try {
            var stat = fs.statSync(this.outstream.path);
            if (stat) {
                this.headers['content-length'] = stat.size;
            }
        }
        catch(ee) { }
        
        // add event handlers
        this.outstream.on('data', function(chunk) {
            if (self._callback.data && typeof self._callback.data === 'function') {
                self._callback.data.call(self.outstream, chunk);
            }
        });
        
        this.outstream.on('end', function() {
            if (self._callback.end && typeof self._callback.end === 'function') {
                self._callback.end.call(self.outstream);
            }
        });
        
        this.outstream.on('error', function(exception) {
            if (self._callback.error && typeof self._callback.error === 'function') {
                self._callback.error.call(self.outstream, exception);
            }
        });
        
        this.outstream.on('close', function() {
            if (self._callback.close && typeof self._callback.close === 'function') {
                self._callback.close.call(self.outstream);
            }
        });
        
        this.outstream.on('fd', function(fd) {
            if (self._callback.fd && typeof self._callback.fd === 'function') {
                self._callback.fd.call(self.outstream, fd);
            }
        });
        
        this.paused = this.outstream.paused;
        this.readable = this.outstream.readable;
    }
    else {
        if (this._callback.error && typeof this._callback.error === 'function') {
            this._callback.error.call(self.outstream, exception);
        }
    }    
};

// Stream inheritance
util.inherits(MObStorMockResponse, Stream);

MObStorMockResponse.prototype.on = function(type, callback) {
    this._callback[type] = callback;
};

MObStorMockResponse.prototype.setEncoding = function(encoding) {
    this._decoder = new StringDecoder(encoding);
};

MObStorMockResponse.prototype.pause = function() {
    this.outstream.pause();
    this.paused = this.outstream.paused;
    this.readable = this.outstream.readable;
};

MObStorMockResponse.prototype.resume = function() {
    this.outstream.resume();
    this.paused = this.outstream.paused;
    this.readable = this.outstream.readable;
};

MObStorMockResponse.prototype.end = function() {
    this.outstream.end();
    this.paused = this.outstream.paused;
    this.readable = this.outstream.readable;
};

MObStorMockResponse.prototype.destroy = function() {
    this.outstream.destroy();
    this.paused = this.outstream.paused;
    this.readable = this.outstream.readable;
};

MObStorMockResponse.prototype.destroySoon = function() {
    this.outstream.destroySoon();
    this.paused = this.outstream.paused;
    this.readable = this.outstream.readable;
};

MObStorMockResponse.prototype.pipe = function(destination, options) {
    return this.outstream.pipe(destination, options);
};

/**
 * MObStor mock request class
 * 
 * @private
 * @author pitecus
 * @constructor
 * @param optionss
 *            {Object} Same object as HTTP, HTTPS class
 */
var MObStorMockRequest = function (options) {
    Stream.call(this);
    
    if(!options) {
        throw new Error('Invalid Parameter');
    }
    
    this._options = options;
    this._options.maxAged = {}; // max aged resource storage hash object
    
    this._decoder = new StringDecoder(this._options.defaultEncoding);
    this.setTimeout = function(timeout, cb) {
    };
    
    this.aborted = false;
    this.abort = function () {
        this.aborted = true;
    };
};

util.inherits(MObStorMockRequest, Stream);

/**
 * mock HTTP/HTTPS.reqeust(option) method
 * 
 * @param options
 */
MObStorMockRequest.prototype.request = function(options) {
    this._request = options;
    
    this._callback = {};
    this._length =0;
    
    if (options.path) {
        this._request.url = url.parse(options.path);
    }
    
    var service="";
    if(this._request.url && this._request.url.host) {
        service=this._request.url.host;
    }
    else {
        service=this._request.host;
    }
    
    this._instream = fs.createWriteStream(this._options[service].storage+'/inbuffer', {
        'flags' : 'w',
        'encoding' : null,
        'mode' : 438
    });
    

    var self = this;
    if (this._instream) {
        this._instream.on('data', function(chunk) {
            if (self._callback.data && typeof self._callback.data === 'function') {
                self._callback.data.call(self._instream, chunk);
            }
        });
        
        this._instream.on('end', function() {
            if (self._callback.end && typeof self._callback.end === 'function') {
                self._callback.end.call(self._instream);
            }
        });
        
        this._instream.on('error', function(exception) {
            if (self._callback.error && typeof self._callback.error === 'function') {
                self._callback.error.call(self._instream, exception);
            }
        });
        
        this._instream.on('close', function() {

            // trigger response event 
            if (typeof self._callback.response === 'function') {
                var response = new MObStorMockResponse(self._options, self._request);
                self._callback.response.call(self._instream, response);
            }
            
            if (self._callback.close && typeof self._callback.close === 'function') {
                self._callback.close.call(self._instream);
            }
        });
        
        this._instream.on('fd', function(fd) {
            if (self._callback.fd && typeof self._callback.fd === 'function') {
                self._callback.fd.call(self._instream, fd);
            }
        });
        
        this.writable = this._instream.writable;
    }
    
    
    return this;
};

MObStorMockRequest.prototype.on = function(type, callback) {
    this._callback[type] = callback;
    return this;
};

MObStorMockRequest.prototype.setEncoding = function(encoding) {
    this._decoder = new StringDecoder(encoding);
};

MObStorMockRequest.prototype.pause = function() {
    this._instream.pause();
};

MObStorMockRequest.prototype.resume = function() {
    this._instream.resume();
};

MObStorMockRequest.prototype.flush = function() {
    this._instream.flush();
};

MObStorMockRequest.prototype.end = function(data, encoding, cb) {
    this._instream.end(cb);
};

MObStorMockRequest.prototype.destroy = function(cb) {
    this._instream.destroy(cb);
};

MObStorMockRequest.prototype.destroy = function(cb) {
    this._instream.destroy(cb);
};

MObStorMockRequest.prototype.end = function() {
    this._instream.end();
    return this;
};

MObStorMockRequest.prototype.write = function(chunk, encoding) {
    this._length +=chunk.length;
    if (this._instream.writable) {
        this._instream.write(chunk);
    }
    else {
        throw Error('can not send the request');
    }
    return this;
};

exports.init = function(config) {
    return new MObStorMockRequest(config);
};
